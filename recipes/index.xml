<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recipes on Metricio - Dashboards for teams built with React and Node</title>
    <link>https://metricio.co/recipes/</link>
    <description>Recent content in Recipes on Metricio - Dashboards for teams built with React and Node</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://metricio.co/recipes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CircleCI</title>
      <link>https://metricio.co/recipes/circleci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://metricio.co/recipes/circleci/</guid>
      <description>Below is a basic example of a job to get your build status from CircleCI and then how to integrate the build status widget into your dashboard using the result from the job.
Job import request from &#39;request-promise-native&#39;; // Helper method to fetch a status for a branch function getBranch(repo, branch, limit = 10) { const githubUser = &#39;GITHUB_ORG_OR_USER&#39;; const endpoint = &#39;https://circleci.com/api/v1.1/project/github&#39;; const options = { uri: `${endpoint}/${githubUser}/${repo}/tree/${branch}`, qs: { &#39;circle-token&#39;: &#39;SECRET_CIRCLE_CI_TOKEN&#39;, offset: 0, limit, }, headers: { &#39;User-Agent&#39;: &#39;Metricio - CircleCI&#39;, }, json: true, }; return request(options); } // Define our interval e.</description>
    </item>
    
    <item>
      <title>Ping</title>
      <link>https://metricio.co/recipes/ping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://metricio.co/recipes/ping/</guid>
      <description>Below is a basic example of a job that gets a ping response time from a URL or endpoint and also how to integrate the ping widget into your dashboard using the result from the job.
Job import request from &#39;request-promise-native&#39;; const options = { resolveWithFullResponse: true, time: true, timeout: 5000, headers: { &#39;User-Agent&#39;: &#39;Metricio - Ping Example&#39;, }, }; export const interval = &#39;* * * * *&#39;; export const perform = async () =&amp;gt; { const google = await request(Object.</description>
    </item>
    
  </channel>
</rss>